
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ATOM BOOLEAN CDER CHARACTER CIZQ COMMENT CONJ_COLL COUNT_COLL DEC DEF DEFN DISPATCH DIVI FIND_MAP FN FOR GET_VEC IF IGUAL INC INCLUDE_STR INDEXOF_VEC JOIN_STR KEYWORD LDER LIZQ MAYOR MENOR MULT NIL NOT NUMBER OR PDER PIZQ PRINT QUOT QUOTE READ_LINE REM RESET RESTA SPLIT_STR STRING SUBVEC SUMA SWAP VARIABLE WHILEalgoritmo : imprimir\n                    | definition\n                    | expresion\n    expresion : valor\n    definition : DEF VARIABLE valorexpresion : PIZQ operadorMat expresion expresion PDERoperadorMat : SUMA\n                   | RESTA\n                   | MULT\n                   | DIVI\n    imprimir : PRINT valorvalor : NUMBER\n            | VARIABLE\n    '
    
_lr_action_items = {'PRINT':([0,],[5,]),'DEF':([0,],[7,]),'PIZQ':([0,6,8,10,13,14,15,16,17,19,21,],[9,-4,-13,-12,9,-7,-8,-9,-10,9,-6,]),'NUMBER':([0,5,6,8,10,12,13,14,15,16,17,19,21,],[10,10,-4,-13,-12,10,10,-7,-8,-9,-10,10,-6,]),'VARIABLE':([0,5,6,7,8,10,12,13,14,15,16,17,19,21,],[8,8,-4,12,-13,-12,8,8,-7,-8,-9,-10,8,-6,]),'$end':([1,2,3,4,6,8,10,11,18,21,],[0,-1,-2,-3,-4,-13,-12,-11,-5,-6,]),'PDER':([6,8,10,20,21,],[-4,-13,-12,21,-6,]),'SUMA':([9,],[14,]),'RESTA':([9,],[15,]),'MULT':([9,],[16,]),'DIVI':([9,],[17,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'algoritmo':([0,],[1,]),'imprimir':([0,],[2,]),'definition':([0,],[3,]),'expresion':([0,13,19,],[4,19,20,]),'valor':([0,5,12,13,19,],[6,11,18,6,6,]),'operadorMat':([9,],[13,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> algoritmo","S'",1,None,None,None),
  ('algoritmo -> imprimir','algoritmo',1,'p_algoritmo','sintactico.py',6),
  ('algoritmo -> definition','algoritmo',1,'p_algoritmo','sintactico.py',7),
  ('algoritmo -> expresion','algoritmo',1,'p_algoritmo','sintactico.py',8),
  ('expresion -> valor','expresion',1,'p_expresion','sintactico.py',12),
  ('definition -> DEF VARIABLE valor','definition',3,'p_definition','sintactico.py',16),
  ('expresion -> PIZQ operadorMat expresion expresion PDER','expresion',5,'p_expression_aritmetica','sintactico.py',20),
  ('operadorMat -> SUMA','operadorMat',1,'p_operMat','sintactico.py',23),
  ('operadorMat -> RESTA','operadorMat',1,'p_operMat','sintactico.py',24),
  ('operadorMat -> MULT','operadorMat',1,'p_operMat','sintactico.py',25),
  ('operadorMat -> DIVI','operadorMat',1,'p_operMat','sintactico.py',26),
  ('imprimir -> PRINT valor','imprimir',2,'p_imprimir','sintactico.py',29),
  ('valor -> NUMBER','valor',1,'p_valor','sintactico.py',32),
  ('valor -> VARIABLE','valor',1,'p_valor','sintactico.py',33),
]
